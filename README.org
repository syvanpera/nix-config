* My NixOS VM development environment

This is very much inspired by Mitchell Hashimotos [[https://github.com/mitchellh/nixos-config][nixos-config]].

** Setup
*** Create and start the virtual machine
In a terminal window run:

#+begin_src shell
make vm/create
#+end_src

This will create and start the VM.
The default name for the VM is ~devbox~, to use a different name, provide the name in the
~NIXNAME~ environment variable ie.

#+begin_src shell
NIXNAME=devbox-2 make vm/create
#+end_src

Wait for the VM to start (this might take a while as it downloads the ISO and boots the installer),
If you want to save some time, you can also give the path to the installer ISO using the environment
variable ~NIXISO~. ie.
#+begin_src shell
NIXISO=/tmp/nixos-minimal.iso make vm/create
#+end_src

*** Change the root password
The new password must be *root*

#+begin_src shell
sudo su
passwd
#+end_src

*** Find out the IP address of the VM
Either by running ~ip a~ in the VM console, or

#+begin_src shell
virsh net-dhcp-leases default | grep nixos | awk '{ print $5 }' | sed 's/\/.\*//'
#+end_src

in your host machines terminal.

*** Install NixOS
In another terminal on the host machine, run:

#+begin_src shell
NIXADDR=xxx.xxx.xxx.xxx make nixos/install
#+end_src

where ~NIXADDR~ is the IP address of the VM. This will end up in an error similar to this:
~make: *** [Makefile:39: nixos/install] Error 255~
but you can safely ignore it, it's just because the VM is rebooting.

After this the VM will reboot and in the other terminal where you had the VM console open you should
now have a fully functional minimal NixOS installation.

*** Take a snapshot of the VM
At this point you can take a snapshot of the VM if you want, just so you have a good base to return
to in case you mess something up.

#+begin_src shell
virsh shutdown --domain VM-NAME
virsh snapshot-create-as --domain VM-NAME --name "pre-bootstrap"
virsh start VM-NAME
#+end_src

where VM-NAME is the name of your VM (~devbox~ by default).

*** Reverting back to the snapshot
#+begin_src shell
virsh shutdown --domain VM-NAME
virsh snapshot-revert --domain VM-NAME --snapshotname "pre-bootstrap" --running
#+end_src

*** Listing snapshots
#+begin_src shell
virsh snapshot-list VM-NAME
#+end_src

*** Deleting a snapshot
#+begin_src shell
virsh snapshot-delete --domain VM-NAME --snapshotname "pre-bootstrap"
#+end_src

*** Connecting to a running VM
#+begin_src shell
virsh --connect qemu:///system console VM-NAME
#+end_src

*** Configure a static IP to the VM
Find out the MAC address of the VM:

#+begin_src shell
virsh dumpxml VM-NAME |grep -i '<mac'
#+end_src

Edit the default network:

#+begin_src shell
virsh net-edit default
#+end_src

Find the following section:

#+begin_src xml
<dhcp>
  <range start='xxx.xxx.xxx.xxx' end='xxx.xxx.xxx.xxx' />
#+end_src

And append the static IP after the range:

#+begin_src xml
<dhcp>
  <range start='xxx.xxx.xxx.xxx' end='xxx.xxx.xxx.xxx' />
  <host mac='XX:XX:XX:XX:XX:XX' name='VM-NAME' ip='xxx.xxx.xxx.xxx' />
#+end_src

Restart the DHCP service:

#+begin_src shell
virsh net-destroy default
virsh net-start default
#+end_src

** Deleting everything and starting over
+ Stop the VM with ~virsh destroy VM-NAME~
+ Remove the domain with ~virsh undefine VM-NAME --nvram~ (deletes the VM)
+ Remove the disk image
